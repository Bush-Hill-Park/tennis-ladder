{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","users","current_choices","postCount","isLoading","matchhistory","playing_with_self","change_me","bind","change_them","change_winner","submit","this","setState","fetch","then","res","json","data","rankings","reverse","e","temp","target","value","req","name","opponent","did_win","axios","post","response","response2","loading","tds","borderLeft","borderRight","borderBottom","borderTop","names","padding","months","style","width","margin","textAlign","map","user","for","id","onChange","type","onClick","length","border","borderCollapse","marginBottom","match","Date","datePlayed","getHours","getMinutes","getMonth","getDate","getFullYear","player_one","player_two","winner","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06010bbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from \"axios\"\nclass App extends Component{\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      users:[],\n      current_choices:[\n      ],\n      postCount:0,\n      isLoading:false,\n      matchhistory: [],\n      playing_with_self: false\n    }\n    this.change_me =this.change_me.bind(this)\n    this.change_them= this.change_them.bind(this)\n    this.change_winner = this.change_winner.bind(this)\n    this.submit = this.submit.bind(this)\n  }\n\n  async componentDidMount(){\n    this.setState({isLoading:true})\n    const rankings = await fetch('https://ben-tennis.herokuapp.com/rank/5ed40fab5939793498b99c80')\n      .then(res=>res.json())\n      .then((data) => {\n        this.setState({users:data.rankings});\n        this.setState({current_choices:[data.rankings[0][0], data.rankings[1][0], \"No\"],})\n      })\n    const match = await fetch('https://ben-tennis.herokuapp.com/matchhistory/')\n      .then(res=> res.json())\n      .then((data) =>{\n        this.setState({matchhistory:data.reverse()});\n      })\n      this.setState({isLoading:false})\n  }\n\n  change_me(e){\n    var temp = this.state.current_choices;\n    temp[0] = e.target.value\n    this.setState({current_choices:temp});\n  }\n\n  change_them(e){\n    var temp = this.state.current_choices;\n    temp[1] = e.target.value\n    this.setState({current_choices:temp});\n  }\n  change_winner(e){\n    var temp = this.state.current_choices;\n    temp[2] = e.target.value\n    this.setState({current_choices:temp});\n  }\n  async submit(){\n    if (this.state.current_choices[0] == this.state.current_choices[1]){\n      this.setState({playing_with_self: true})\n      return;\n    }\n    this.setState({playing_with_self: false})\n    var req = {name: this.state.current_choices[0], opponent:this.state.current_choices[1], did_win:this.state.current_choices[2], rankings:this.state.users};\n    axios.post(\"https://ben-tennis.herokuapp.com/rankhistory/\", req)\n    const response = await axios.post(\"https://ben-tennis.herokuapp.com/rank/5ed40fab5939793498b99c80\", req)\n    this.setState({users:response.data})\n    const response2 = await axios.post(\"https://ben-tennis.herokuapp.com/matchhistory/\", req)\n    this.setState({matchhistory:response2.data.reverse()})\n  }\n\n  render(){\n    const isLoading= this.state.isLoading;\n    var loading = <div>loading please wait....</div>\n    const tds = {\n      borderLeft: \"1px solid black\",\n      borderRight: \"1px solid black\",\n      borderBottom: \"1px solid black\",\n      borderTop:\"1px solid black\"\n    }\n    const names = {\n      padding:\"5px\"\n    }\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n      ];\n    return(\n      <div>\n      {isLoading ? loading : \n      \n      <div style={{width:\"100%\", margin:\"auto\"}}>\n        <div style={{margin: \"0 auto\",\n          width: \"85%\"}}>\n\n          <table>\n            <tr><td style={{textAlign:\"center\"}}><i><b>Player Name</b></i></td><td><b>Rank</b></td></tr>\n            {this.state.users.map(user => <tr><td style={names}>{user[0]}</td><td style={names}>{user[1]}</td></tr>)}\n          </table>\n\n        </div>\n        \n        <div style={{width:\"100%\"}}>\n          <div style={{margin: \"0 auto\",\n          width: \"85%\"}}>\n          <label for=\"who you\">Who are you?&ensp;</label>\n          <select id=\"who you\" name=\"who you\" value={this.state.current_choices[0]} onChange={this.change_me}>\n            {this.state.users.map(user => <option value={user[0]}>{user[0]}</option>)}\n          </select>\n\n          <br></br>\n          <br></br>\n          <label for=\"who them\">Who did you play against?&ensp;</label>\n          <select id=\"who them\" name=\"who them\" value={this.state.current_choices[1]} onChange={this.change_them}>\n            {this.state.users.map(user => <option value={user[0]}>{user[0]}</option>)}\n          </select>\n\n          <br></br>\n          <br></br>\n          <label for=\"win\">Did you win?&ensp;</label>\n          <select id=\"win\" name=\"win\" value={this.state.current_choices[2]} onChange={this.change_winner}>\n            <option value=\"No\">No</option>\n            <option value=\"Yes\">Yes</option>\n          </select>\n\n          &ensp;<input type=\"button\" value=\"Submit\" onClick={this.submit}></input>\n          {this.state.playing_with_self? <p>You can't play a match against yourself!</p> :''}\n          </div>\n          <br></br>\n          <br></br>\n          {this.state.matchhistory.length == 0 ? '':\n          <table style={{border:\"1px solid black\", borderCollapse:\"collapse\",marginBottom:\"5%\", margin: \"0 auto\",\n          width: \"85%\"}}>\n          <tbody style={{}}>\n          <th>Date</th><th>Player one</th><th>Player Two</th><th>Winner</th>\n          {this.state.matchhistory.map((match) => \n              <tr>\n                <td style={tds}>\n                  {new Date(match.datePlayed).getHours()}:{(new Date(match.datePlayed).getMinutes() < 10 ? '0' : '') + new Date(match.datePlayed).getMinutes()} {months[new Date(match.datePlayed).getMonth()]} {new Date(match.datePlayed).getDate()}, {new Date(match.datePlayed).getFullYear()}\n                  </td>\n                <td style={tds}>{match.player_one}</td>\n                <td style={tds}>{match.player_two}</td>\n                <td style={tds}>{match.winner}</td>\n              </tr>\n          )}\n          </tbody>\n          </table>\n          }\n\n        </div>\n      </div>\n      }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}